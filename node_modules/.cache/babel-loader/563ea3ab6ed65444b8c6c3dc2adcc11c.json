{"remainingRequest":"/home/artur/programowanie/organiser/node_modules/babel-loader/lib/index.js!/home/artur/programowanie/organiser/node_modules/eslint-loader/index.js??ref--13-0!/home/artur/programowanie/organiser/client/src/store/modules/goals.js","dependencies":[{"path":"/home/artur/programowanie/organiser/client/src/store/modules/goals.js","mtime":1635267536827},{"path":"/home/artur/programowanie/organiser/node_modules/cache-loader/dist/cjs.js","mtime":1638016032464},{"path":"/home/artur/programowanie/organiser/node_modules/babel-loader/lib/index.js","mtime":1638016034515},{"path":"/home/artur/programowanie/organiser/node_modules/eslint-loader/index.js","mtime":1638016032640}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEdvYWxzU2VydmljZSBmcm9tICJAL1dhcmVob3VzZS9Hb2Fsc1NlcnZpY2UiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZXNwYWNlZDogdHJ1ZSwKICBzdGF0ZTogKCkgPT4gKHsKICAgIGdvYWxzOiBbXQogIH0pLAogIG11dGF0aW9uczogewogICAgU0VUX0dPQUxTKHN0YXRlLCBnb2FscykgewogICAgICBzdGF0ZS5nb2FscyA9IGdvYWxzOwogICAgfSwKCiAgICBBRERfR09BTChzdGF0ZSwgZ29hbCkgewogICAgICBzdGF0ZS5nb2Fscy5wdXNoKGdvYWwpOwogICAgfQoKICB9LAogIGFjdGlvbnM6IHsKICAgIGFzeW5jIGZldGNoQWxsR29hbHMoewogICAgICBjb21taXQKICAgIH0pIHsKICAgICAgY29uc3QgZ29hbHMgPSBhd2FpdCBHb2Fsc1NlcnZpY2UuZ2V0R29hbHMoKTsKICAgICAgY29tbWl0KCJTRVRfR09BTFMiLCBnb2Fscyk7CiAgICB9LAoKICAgIGFzeW5jIHVwZGF0ZUdvYWwoewogICAgICBkaXNwYXRjaAogICAgfSwgdXBkYXRlZEdvYWwpIHsKICAgICAgYXdhaXQgR29hbHNTZXJ2aWNlLnVwZGF0ZUdvYWwodXBkYXRlZEdvYWwpOwogICAgICBhd2FpdCBkaXNwYXRjaCgiZmV0Y2hBbGxHb2FscyIpOwogICAgfSwKCiAgICBhc3luYyBkZWxldGVHb2FsKHsKICAgICAgZGlzcGF0Y2gKICAgIH0sIHsKICAgICAgaWQKICAgIH0pIHsKICAgICAgYXdhaXQgR29hbHNTZXJ2aWNlLmRlbGV0ZUdvYWwoaWQpOwogICAgICBhd2FpdCBkaXNwYXRjaCgiZmV0Y2hBbGxHb2FscyIpOwogICAgfSwKCiAgICBhc3luYyBjcmVhdGVHb2FsKHsKICAgICAgZGlzcGF0Y2gKICAgIH0sIG5ld0dvYWwpIHsKICAgICAgY29uc3QgewogICAgICAgIGRhdGEKICAgICAgfSA9IGF3YWl0IEdvYWxzU2VydmljZS5pbnNlcnRHb2FsKG5ld0dvYWwpOwogICAgICBhd2FpdCBkaXNwYXRjaCgiZmV0Y2hBbGxHb2FscyIpOwogICAgfQoKICB9LAogIGdldHRlcnM6IHsKICAgIGdvYWxzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5nb2FsczsKICAgIH0KCiAgfQp9Ow=="},{"version":3,"sources":["/home/artur/programowanie/organiser/client/src/store/modules/goals.js"],"names":["GoalsService","namespaced","state","goals","mutations","SET_GOALS","ADD_GOAL","goal","push","actions","fetchAllGoals","commit","getGoals","updateGoal","dispatch","updatedGoal","deleteGoal","id","createGoal","newGoal","data","insertGoal","getters"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,0BAAzB;AAEA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAGbC,EAAAA,KAAK,EAAE,OAAO;AACZC,IAAAA,KAAK,EAAE;AADK,GAAP,CAHM;AAObC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,CAACH,KAAD,EAAQC,KAAR,EAAe;AACtBD,MAAAA,KAAK,CAACC,KAAN,GAAcA,KAAd;AACD,KAHQ;;AAITG,IAAAA,QAAQ,CAACJ,KAAD,EAAQK,IAAR,EAAc;AACpBL,MAAAA,KAAK,CAACC,KAAN,CAAYK,IAAZ,CAAiBD,IAAjB;AACD;;AANQ,GAPE;AAgBbE,EAAAA,OAAO,EAAE;AACP,UAAMC,aAAN,CAAoB;AAAEC,MAAAA;AAAF,KAApB,EAAgC;AAC9B,YAAMR,KAAK,GAAG,MAAMH,YAAY,CAACY,QAAb,EAApB;AACAD,MAAAA,MAAM,CAAC,WAAD,EAAcR,KAAd,CAAN;AACD,KAJM;;AAKP,UAAMU,UAAN,CAAiB;AAAEC,MAAAA;AAAF,KAAjB,EAA+BC,WAA/B,EAA4C;AAC1C,YAAMf,YAAY,CAACa,UAAb,CAAwBE,WAAxB,CAAN;AACA,YAAMD,QAAQ,CAAC,eAAD,CAAd;AACD,KARM;;AASP,UAAME,UAAN,CAAiB;AAAEF,MAAAA;AAAF,KAAjB,EAA+B;AAAEG,MAAAA;AAAF,KAA/B,EAAuC;AACrC,YAAMjB,YAAY,CAACgB,UAAb,CAAwBC,EAAxB,CAAN;AACA,YAAMH,QAAQ,CAAC,eAAD,CAAd;AACD,KAZM;;AAaP,UAAMI,UAAN,CAAiB;AAAEJ,MAAAA;AAAF,KAAjB,EAA+BK,OAA/B,EAAwC;AACtC,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMpB,YAAY,CAACqB,UAAb,CAAwBF,OAAxB,CAAvB;AACA,YAAML,QAAQ,CAAC,eAAD,CAAd;AACD;;AAhBM,GAhBI;AAmCbQ,EAAAA,OAAO,EAAE;AACPnB,IAAAA,KAAK,CAACD,KAAD,EAAQ;AACX,aAAOA,KAAK,CAACC,KAAb;AACD;;AAHM;AAnCI,CAAf","sourcesContent":["import GoalsService from \"@/Warehouse/GoalsService\";\n\nexport default {\n  namespaced: true,\n\n  state: () => ({\n    goals: [],\n  }),\n\n  mutations: {\n    SET_GOALS(state, goals) {\n      state.goals = goals;\n    },\n    ADD_GOAL(state, goal) {\n      state.goals.push(goal);\n    },\n  },\n\n  actions: {\n    async fetchAllGoals({ commit }) {\n      const goals = await GoalsService.getGoals();\n      commit(\"SET_GOALS\", goals);\n    },\n    async updateGoal({ dispatch }, updatedGoal) {\n      await GoalsService.updateGoal(updatedGoal);\n      await dispatch(\"fetchAllGoals\");\n    },\n    async deleteGoal({ dispatch }, { id }) {\n      await GoalsService.deleteGoal(id);\n      await dispatch(\"fetchAllGoals\");\n    },\n    async createGoal({ dispatch }, newGoal) {\n      const { data } = await GoalsService.insertGoal(newGoal);\n      await dispatch(\"fetchAllGoals\")\n    },\n  },\n\n  getters: {\n    goals(state) {\n      return state.goals;\n    },\n  },\n};\n"]}]}